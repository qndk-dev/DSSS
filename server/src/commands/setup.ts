import {
    SlashCommandBuilder,
    ChatInputCommandInteraction,
    ChannelType,
    EmbedBuilder,
    PermissionFlagsBits,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    ComponentType,
    StringSelectMenuBuilder,
    StringSelectMenuInteraction,
    ButtonInteraction,
    ChannelSelectMenuBuilder,
    RoleSelectMenuBuilder,
    ChannelSelectMenuInteraction,
    RoleSelectMenuInteraction,
} from 'discord.js';
import { Command } from '../interfaces/Command.js';
import { DatabaseManager } from '../database/database.js';

interface SetupState {
    welcome_channel_id?: string;
    log_channel_id?: string;
    mod_channel_id?: string;
    autorole_id?: string;
}

const command: Command = {
    data: new SlashCommandBuilder()
        .setName('setup')
        .setDescription('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction: ChatInputCommandInteraction) {
        await interaction.deferReply();

        try {
            const dbManager = await DatabaseManager.getInstance();
            const currentSettings = await dbManager.getGuildSettings(interaction.guildId!);
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            let setupState: SetupState = { ...currentSettings };

            const showMainMenu = async (isUpdate = false) => {
                const embed = new EmbedBuilder()
                    .setColor('#0099ff')
                    .setTitle('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞')
                    .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:')
                    .addFields(
                        {
                            name: 'üëã –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π',
                            value: setupState.welcome_channel_id ? `<#${setupState.welcome_channel_id}>` : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                            inline: true
                        },
                        {
                            name: 'üìù –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤',
                            value: setupState.log_channel_id ? `<#${setupState.log_channel_id}>` : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                            inline: true
                        },
                        {
                            name: 'üõ°Ô∏è –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                            value: setupState.mod_channel_id ? `<#${setupState.mod_channel_id}>` : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                            inline: true
                        },
                        {
                            name: 'üé≠ –ê–≤—Ç–æ—Ä–æ–ª—å',
                            value: setupState.autorole_id ? `<@&${setupState.autorole_id}>` : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
                            inline: true
                        }
                    )
                    .setFooter({ text: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' });

                const selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('setup_select')
                    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å...')
                    .addOptions([
                        {
                            label: '–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π',
                            description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                            value: 'welcome',
                            emoji: 'üëã'
                        },
                        {
                            label: '–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤',
                            description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤',
                            value: 'logs',
                            emoji: 'üìù'
                        },
                        {
                            label: '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                            description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                            value: 'moderation',
                            emoji: 'üõ°Ô∏è'
                        },
                        {
                            label: '–ê–≤—Ç–æ—Ä–æ–ª—å',
                            description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                            value: 'autorole',
                            emoji: 'üé≠'
                        }
                    ]);

                const actionRow1 = new ActionRowBuilder<StringSelectMenuBuilder>()
                    .addComponents(selectMenu);

                const actionRow2 = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('setup_save')
                            .setLabel('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId('setup_reset')
                            .setLabel('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('setup_cancel')
                            .setLabel('‚ùå –û—Ç–º–µ–Ω–∞')
                            .setStyle(ButtonStyle.Secondary)
                    );

                const messageData = {
                    embeds: [embed],
                    components: [actionRow1, actionRow2]
                };

                if (isUpdate) {
                    await interaction.editReply(messageData);
                } else {
                    await interaction.editReply(messageData);
                }
            };

            await showMainMenu();

            const collector = interaction.channel?.createMessageComponentCollector({
                componentType: ComponentType.StringSelect,
                filter: (i) => i.user.id === interaction.user.id,
                time: 300000 // 5 –º–∏–Ω—É—Ç
            });

            const buttonCollector = interaction.channel?.createMessageComponentCollector({
                componentType: ComponentType.Button,
                filter: (i) => i.user.id === interaction.user.id,
                time: 300000
            });

            const channelCollector = interaction.channel?.createMessageComponentCollector({
                componentType: ComponentType.ChannelSelect,
                filter: (i) => i.user.id === interaction.user.id,
                time: 300000
            });

            const roleCollector = interaction.channel?.createMessageComponentCollector({
                componentType: ComponentType.RoleSelect,
                filter: (i) => i.user.id === interaction.user.id,
                time: 300000
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
            collector?.on('collect', async (selectInteraction: StringSelectMenuInteraction) => {
                const selectedOption = selectInteraction.values[0];
                
                if (selectedOption === 'welcome' || selectedOption === 'logs' || selectedOption === 'moderation') {
                    const channelSelect = new ChannelSelectMenuBuilder()
                        .setCustomId(`channel_${selectedOption}`)
                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª...')
                        .addChannelTypes(ChannelType.GuildText);

                    const backButton = new ButtonBuilder()
                        .setCustomId('back_to_main')
                        .setLabel('‚Üê –ù–∞–∑–∞–¥')
                        .setStyle(ButtonStyle.Secondary);

                    const clearButton = new ButtonBuilder()
                        .setCustomId(`clear_${selectedOption}`)
                        .setLabel('üóëÔ∏è –£–±—Ä–∞—Ç—å')
                        .setStyle(ButtonStyle.Danger);

                    const actionRow1 = new ActionRowBuilder<ChannelSelectMenuBuilder>()
                        .addComponents(channelSelect);
                    
                    const actionRow2 = new ActionRowBuilder<ButtonBuilder>()
                        .addComponents(backButton, clearButton);

                    const embed = new EmbedBuilder()
                        .setColor('#0099ff')
                        .setTitle(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${getOptionName(selectedOption)}`)
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:');

                    await selectInteraction.update({
                        embeds: [embed],
                        components: [actionRow1, actionRow2]
                    });

                } else if (selectedOption === 'autorole') {
                    const roleSelect = new RoleSelectMenuBuilder()
                        .setCustomId('role_autorole')
                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å...');

                    const backButton = new ButtonBuilder()
                        .setCustomId('back_to_main')
                        .setLabel('‚Üê –ù–∞–∑–∞–¥')
                        .setStyle(ButtonStyle.Secondary);

                    const clearButton = new ButtonBuilder()
                        .setCustomId('clear_autorole')
                        .setLabel('üóëÔ∏è –£–±—Ä–∞—Ç—å')
                        .setStyle(ButtonStyle.Danger);

                    const actionRow1 = new ActionRowBuilder<RoleSelectMenuBuilder>()
                        .addComponents(roleSelect);
                    
                    const actionRow2 = new ActionRowBuilder<ButtonBuilder>()
                        .addComponents(backButton, clearButton);

                    const embed = new EmbedBuilder()
                        .setColor('#0099ff')
                        .setTitle('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–æ–ª–∏')
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:');

                    await selectInteraction.update({
                        embeds: [embed],
                        components: [actionRow1, actionRow2]
                    });
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
            channelCollector?.on('collect', async (channelInteraction: ChannelSelectMenuInteraction) => {
                const customId = channelInteraction.customId;
                const selectedChannel = channelInteraction.channels.first();

                if (customId.startsWith('channel_')) {
                    const optionType = customId.replace('channel_', '');
                    
                    if (optionType === 'welcome') {
                        setupState.welcome_channel_id = selectedChannel?.id;
                    } else if (optionType === 'logs') {
                        setupState.log_channel_id = selectedChannel?.id;
                    } else if (optionType === 'moderation') {
                        setupState.mod_channel_id = selectedChannel?.id;
                    }

                    await channelInteraction.deferUpdate();
                    await showMainMenu(true);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
            roleCollector?.on('collect', async (roleInteraction: RoleSelectMenuInteraction) => {
                const selectedRole = roleInteraction.roles.first();
                setupState.autorole_id = selectedRole?.id;

                await roleInteraction.deferUpdate();
                await showMainMenu(true);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            buttonCollector?.on('collect', async (buttonInteraction: ButtonInteraction) => {
                const customId = buttonInteraction.customId;

                if (customId === 'back_to_main') {
                    await buttonInteraction.deferUpdate();
                    await showMainMenu(true);
                    
                } else if (customId.startsWith('clear_')) {
                    const optionType = customId.replace('clear_', '');
                    
                    if (optionType === 'welcome') {
                        setupState.welcome_channel_id = undefined;
                    } else if (optionType === 'logs') {
                        setupState.log_channel_id = undefined;
                    } else if (optionType === 'moderation') {
                        setupState.mod_channel_id = undefined;
                    } else if (optionType === 'autorole') {
                        setupState.autorole_id = undefined;
                    }

                    await buttonInteraction.deferUpdate();
                    await showMainMenu(true);
                    
                } else if (customId === 'setup_save') {
                    await dbManager.updateGuildSettings(interaction.guildId!, setupState);

                    const successEmbed = new EmbedBuilder()
                        .setColor('#00ff00')
                        .setTitle('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
                        .setDescription('–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.')
                        .addFields(
                            {
                                name: 'üëã –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π',
                                value: setupState.welcome_channel_id ? `<#${setupState.welcome_channel_id}>` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                                inline: true
                            },
                            {
                                name: 'üìù –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤',
                                value: setupState.log_channel_id ? `<#${setupState.log_channel_id}>` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                                inline: true
                            },
                            {
                                name: 'üõ°Ô∏è –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                                value: setupState.mod_channel_id ? `<#${setupState.mod_channel_id}>` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                                inline: true
                            },
                            {
                                name: 'üé≠ –ê–≤—Ç–æ—Ä–æ–ª—å',
                                value: setupState.autorole_id ? `<@&${setupState.autorole_id}>` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                                inline: true
                            }
                        )
                        .setTimestamp();

                    await buttonInteraction.update({
                        embeds: [successEmbed],
                        components: []
                    });

                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
                    collector?.stop();
                    buttonCollector?.stop();
                    channelCollector?.stop();
                    roleCollector?.stop();
                    
                } else if (customId === 'setup_reset') {
                    setupState = {};

                    await buttonInteraction.deferUpdate();
                    await showMainMenu(true);
                    
                } else if (customId === 'setup_cancel') {
                    const cancelEmbed = new EmbedBuilder()
                        .setColor('#ff9900')
                        .setTitle('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
                        .setDescription('–ù–∏–∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');

                    await buttonInteraction.update({
                        embeds: [cancelEmbed],
                        components: []
                    });

                    collector?.stop();
                    buttonCollector?.stop();
                    channelCollector?.stop();
                    roleCollector?.stop();
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            collector?.on('end', () => {
                // –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç—è—Ç—Å—è
            });

        } catch (error) {
            console.error('Error in interactive setup command:', error);
            await interaction.editReply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞.',
                embeds: [],
                components: []
            });
        }
    }
};

function getOptionName(option: string): string {
    switch (option) {
        case 'welcome': return '–∫–∞–Ω–∞–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π';
        case 'logs': return '–∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤';
        case 'moderation': return '–∫–∞–Ω–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
        case 'autorole': return '–∞–≤—Ç–æ—Ä–æ–ª–∏';
        default: return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ–ø—Ü–∏–∏';
    }
}

export default command;